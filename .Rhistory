# dev.off()
#
# stuff <- data.frame(DArT_data[, c("longitude", "latitude")], grp = groupMem)
# write.csv(stuff, paste0("/home/peterw/Data_and_Projects/RBG Projects/Acacia provenances MS/Results/", gsub(" ", "_", thisTaxon, fixed = TRUE), "_groupaissgnmentTable.csv"))
# ans <- stuff %>% group_by(grp) %>% summarise_at(c("longitude", "latitude"), funs(mean))
#
# write.csv(ans, paste0("/home/peterw/Data_and_Projects/RBG Projects/Acacia provenances MS/Results/", gsub(" ", "_", thisTaxon, fixed = TRUE), "_groupedData_geocoords.csv"), row.names = FALSE)
# cat("done\n\n")
}
searchSet <- cellFromRowColCombine(baseRas,
(minRow + 5):(maxRow - 5),
(minCol + 5):(maxCol - 5))
focalXY <- xyFromCell(baseRas, searchSet)
#focalSet <- maxFocalCellInd[which(maxFocalCellInd %in% searchSet)]
#focalXY <- xyFromCell(baseRas, focalSet)
plot(sydBasinPolygon)
points(focalXY)
points(inBasinSites[["Acacia linifolia"]]@coords, pch = 16, col = "plum", cex = 0.7)
focalSet <- maxFocalCellInd[which(maxFocalCellInd %in% searchSet)]
focalXY <- xyFromCell(baseRas, focalSet)
plot(sydBasinPolygon)
points(focalXY)
points(inBasinSites[["Acacia linifolia"]]@coords, pch = 16, col = "plum", cex = 0.7)
focalTally <- matrix(0, length(focalSet), length(taxonList))
colnames(focalTally) <- taxonList
i <- 1
#for (i in 1:length(focalSet))
{
# May be replace this for loop with an lapply() loop
thisTaxon <- "Acacia linifolia"
#for (thisTaxon in taxonList)
{
distVals <- rep(0, nrow(inBasinSites[[thisTaxon]]@coords))
for (k in 1:nrow(inBasinSites[[thisTaxon]]@coords))
{
distVals[k] <- distVincentyEllipsoid(focalXY[i, ],
inBasinSites[[thisTaxon]]@coords[k, ])
}
print(distVals)
#focalTally[i, thisTaxon] <- sum(distVals <= searchDist)
#print(sum(distVals <= searchDist))
# geoDistMat <- matrix(0, nrow(DArT_data), nrow(DArT_data), dimnames = list(rownames(DArT_data), rownames(DArT_data)))
#
# for (i in 1:(nrow(DArT_data) - 1))
# {
#   for (j in (i + 1):nrow(DArT_data))
#   {
#     geoDistMat[i, j] <- distVincentyEllipsoid(DArT_data[i, c("longitude", "latitude")],
#                                               DArT_data[j, c("longitude", "latitude")])
#     geoDistMat[j, i] <- geoDistMat[i, j]
#   }
# }
}
}
for (i in 1:length(focalSet))
{
# May be replace this for loop with an lapply() loop
thisTaxon <- "Acacia linifolia"
#for (thisTaxon in taxonList)
{
distVals <- rep(0, nrow(inBasinSites[[thisTaxon]]@coords))
for (k in 1:nrow(inBasinSites[[thisTaxon]]@coords))
{
distVals[k] <- distVincentyEllipsoid(focalXY[i, ],
inBasinSites[[thisTaxon]]@coords[k, ])
}
#print(distVals)
#focalTally[i, thisTaxon] <- sum(distVals <= searchDist)
if (sum(distVals <= searchDist) > 0) print(sum(distVals <= searchDist))
# geoDistMat <- matrix(0, nrow(DArT_data), nrow(DArT_data), dimnames = list(rownames(DArT_data), rownames(DArT_data)))
#
# for (i in 1:(nrow(DArT_data) - 1))
# {
#   for (j in (i + 1):nrow(DArT_data))
#   {
#     geoDistMat[i, j] <- distVincentyEllipsoid(DArT_data[i, c("longitude", "latitude")],
#                                               DArT_data[j, c("longitude", "latitude")])
#     geoDistMat[j, i] <- geoDistMat[i, j]
#   }
# }
}
}
source('~/Data_and_Projects/RBG Projects/Acacia provenances MS/bruteForceSearch.R')
View(focalTally)
nrow(focalTally)
goodCellCount <- 5
goodCells <- vector("list", length(taxonList))
names(goodCells) <- taxonList
for (thisTaxon in taxonList)
{
goodCells[[thisTaxon]] <- which(focalTally[, thisTaxon] >= goodCellCount)
}
any(goodCells[["Acacia suaveolens"]] %in% goodCells[["Acacia linifolia"]])
save(focalTally, paste0("/home/peterw/Data_and_Projects/RBG Projects/Acacia provenances MS/siteSearch/focalTally_", searchDist,"m.Rd"))
save(focalTally, file = paste0("/home/peterw/Data_and_Projects/RBG Projects/Acacia provenances MS/siteSearch/goodCellSearchResults_", searchDist,"m_goodCellCount_", goodCellCount,".Rd"))
save(focalTally, file = paste0("/home/peterw/Data_and_Projects/RBG Projects/Acacia provenances MS/siteSearch/focalTally_", searchDist,"m.Rd"))
unlist(goodCells)
zz <- sort(unlist(goodCells))
zz
focalSet[1:20]
goodCellCount <- 5
goodCells <- vector("list", length(taxonList))
names(goodCells) <- taxonList
for (thisTaxon in taxonList)
{
goodCells[[thisTaxon]] <- focalSet[which(focalTally[, thisTaxon] >= goodCellCount)]
}
save(goodCells, file = paste0("/home/peterw/Data_and_Projects/RBG Projects/Acacia provenances MS/siteSearch/goodCellSearchResults_", searchDist,"m_goodCellCount_", goodCellCount,".Rd"))
zz <- sort(unlist(goodCells))
rle(zz)
xx <- rle(zz)
xx$lengths
names(zz) <- NULL
xx <- rle(zz)
xx$lengths
goodCells[["Acacia linifolia"]]
goodCells[["Acacia longifolia"]]
goodCells[["Acacia suaveolens"]]
goodCells[["Acacia termialis"]]
goodCells[["Acacia terminalis"]]
goodCells[["Acacia ulicifolia"]]
crossCheck <- rle(unlist(goodCells))
any(crossCheck$lengths > =2)
any(crossCheck$lengths >= 2)
crossCheck$values
cat("    Search found", sum(crossCheck$lengths >= 2), "multi-species sets")
source('~/Data_and_Projects/RBG Projects/Acacia provenances MS/bruteForceSearch.R')
focalTally_binary <- ifelse(focalTally >= 5, 1, 0)
blah <- rowSums(focalTally_binary)
any(blah > 0)
which(blah > 0)
focalTally[which(blah > 0),]
focalTally[which(blah > 5),]
focalTally_binary[which(blah > 0),]
focalTally_binary[which(blah > 2),]
focalTally_binary[which(blah >= 2),]
View(focalTally)
rownames(focalTally) <- focalSet
View(focalTally)
ii <- which(rowSums(focalTally) > = 5)
ii <- which(rowSums(focalTally) >= 5)
stuff <- focalTally[ii,]
View(stuff)
focalTally_binary <- ifelse(focalTally >= 3, 1, 0)
maybeCells <- names(focalTally[which(rowSums(focalTally_binary) >= 2)])
View(focalTally_binary)
which(focalTally_binary[,1] == 1)
intersect(which(focalTally_binary[,1] == 1), which(focalTally_binary[,1] == 3))
intersect(which(focalTally_binary[,1] == 1), which(focalTally_binary[,1] == 2))
intersect(which(focalTally_binary[,1] == 1), which(focalTally_binary[,2] == 1))
intersect(which(focalTally_binary[,1] == 1), which(focalTally_binary[,3] == 1))
intersect(which(focalTally_binary[,1] == 1), which(focalTally_binary[,3] == 4))
intersect(which(focalTally_binary[,1] == 1), which(focalTally_binary[,3] == 5))
maybeCells <- names(focalTally[which(rowSums(focalTally_binary) >= 2)])
rowSums(focalTally_binary)
maybeCells <- names(focalTally)[which(rowSums(focalTally_binary) >= 2)])
maybeCells <- names(focalTally)[which(rowSums(focalTally_binary) >= 2)]
maybeCells <- names(focalTally)[which(rowSums(focalTally_binary) >= 2)]
any(rowSums(focalTally_binary) >= 2)
which(rowSums(focalTally_binary) >= 2)
names(focalTally)[which(rowSums(focalTally_binary) >= 2)]
names(focalTally)
names(focalTally) <- focalSet
names(focalTally)[which(rowSums(focalTally_binary) >= 2)]
names(focalTally)[which(rowSums(focalTally_binary) >= 3)]
focalTally[names(focalTally)[which(rowSums(focalTally_binary) >= 3)],]
source('~/Data_and_Projects/RBG Projects/Acacia provenances MS/bruteForceSearch.R')
names(focalTally)[which(rowSums(focalTally_binary) >= 2)]
names(focalTally)
rownames(focalTally) <- as.character(focalSet)
names(focalTally)[which(rowSums(focalTally_binary) >= 2)]
focalTally_binary <- ifelse(focalTally >= 5, 1, 0)
names(focalTally)[which(rowSums(focalTally_binary) >= 2)]
focalTally_binary <- ifelse(focalTally >= 5, 1, 0)
rowSums(focalTally_binary)
which(rowSums(focalTally_binary) >= 2)
names(focalTally)
rownames(focalTally) <- fullSet
rownames(focalTally) <- focalSet
names(focalTally)
rownames(focalTally)
colnames(focalTally) <- taxonList
names(focalTally)[which(rowSums(focalTally_binary) >= 2)]
names(focalTally)
rownames(focalTally)[which(rowSums(focalTally_binary) >= 2)]
intersect(which(focalTally_binary[,1] >= 5), which(focalTally_binary[,3] >= 5))
rownames(focalTally)[which(rowSums(focalTally_binary) >= 2)]
rownames(focalTally)[which(rowSums(focalTally_binary) >= 3)]
intersect(which(focalTally_binary[,1] >= 5), which(focalTally_binary[,4] >= 5))
intersect(which(focalTally_binary[,1] >= 5), which(focalTally_binary[,3] >= 5))
intersect(which(focalTally[,1] >= 5), which(focalTally[,3] >= 5))
intersect(which(focalTally[,1] >= 5), which(focalTally[,2] >= 5))
intersect(which(focalTally[,1] >= 5), which(focalTally[,4] >= 5))
intersect(which(focalTally[,1] >= 5), which(focalTally[,5] >= 5))
candidateFoci_rowNums <- intersect(which(focalTally[,1] >= 5), which(focalTally[,5] >= 5))
write.csv(focalTally[candidateFoci_rowNums,], paste0("/home/peterw/Data_and_Projects/RBG Projects/Acacia provenances MS/siteSearch/focalTally_candidateSites_", searchDist,"m.csv"))
focalTally[candidateFoci_rowNums,]
intersect(which(focalTally[,1] >= 5), which(focalTally[,5] >= 5))
candidateFoci_rowNums <- intersect(which(focalTally[,1] >= 5), which(focalTally[,3] >= 5))
write.csv(focalTally[candidateFoci_rowNums,], paste0("/home/peterw/Data_and_Projects/RBG Projects/Acacia provenances MS/siteSearch/focalTally_candidateSites_", searchDist,"m.csv"))
focalTally[candidateFoci_rowNums,]
source('~/Data_and_Projects/RBG Projects/Acacia provenances MS/bruteForceSearch.R')
focalTally[candidateFoci_rowNums,]
source('~/Data_and_Projects/RBG Projects/Acacia provenances MS/bruteForceSearch.R')
focalTally[candidateFoci_rowNums,]
max(focalTally[candidateFoci_rowNums,1])
max(focalTally[candidateFoci_rowNums,2])
max(focalTally[candidateFoci_rowNums,3])
max(focalTally[candidateFoci_rowNums,4])
max(focalTally[candidateFoci_rowNums,5])
focalTally[which(max(focalTally[candidateFoci_rowNums,1])),]
focalTally[which(focalTally[candidateFoci_rowNums,1] == max(focalTally[candidateFoci_rowNums,1])),]
focalTally[which(focalTally[,1] == max(focalTally[,1])),]
focalXY[which(focalTally[,1] == max(focalTally[,1])),]
write.csv(focalXY[which(focalTally[,1] == max(focalTally[,1])),], "/home/peterw/Data_and_Projects/RBG Projects/Acacia provenances MS/siteSearch/focalTally_candidateSites_XY_", searchDist,"m.csv"")
)
pasrte
))))))
,()
crossCheck <- rle(unlist(goodCells))
asd
as
df
as
df
asd
awe
q
34t
write.csv(focalXY[which(focalTally[,1] == max(focalTally[,1])),], "/home/peterw/Data_and_Projects/RBG Projects/Acacia provenances MS/siteSearch/focalTally_candidateSites_XY_50000m.csv")
thisTaxon <- "Acacia linifolia"
pcaFilename <- paste0("/home/peterw/Data_and_Projects/RBG Projects/Restore and Renew/rrspecies_Samanalysis/based_on_SYmeta/", taxonAbbrev, "/PCA/", taxonAbbrev, " sample_PCA1_PC2_PC3.csv")
stupidAbbrev <- c("AcacLini", "AcacLong", "AcacSuav", "AcacTerm", "AcacUlic")
names(stupidAbbrev) <- taxonList
taxonAbbrev <- stupidAbbrev[thisTaxon]
pcaFilename <- paste0("/home/peterw/Data_and_Projects/RBG Projects/Restore and Renew/rrspecies_Samanalysis/based_on_SYmeta/", taxonAbbrev, "/PCA/", taxonAbbrev, " sample_PCA1_PC2_PC3.csv")
pcaTable <- read.table(pcaFilename, header = TRUE, row.names = 1, stringsAsFactors = FALSE)
pcaFilename <- paste0("/home/peterw/Data_and_Projects/RBG Projects/Restore and Renew/rrspecies_Samanalysis/based_on_SYmeta/", taxonAbbrev, "/PCA/", taxonAbbrev, " sample_PC1_PC2_PC3.csv")
a
pcaFilename
pcaTable <- read.table(pcaFilename, header = TRUE, row.names = 1, stringsAsFactors = FALSE)
View(pcaTable)
library(RandR.db)
library(eply)
db <- RSQLite::dbConnect(SQLite(), .sqlPath_default)
DArT_data <- RSLQite::dbGetQuery(db, paste0("SELECT NSWnumber, eventKey, decimalLongitude, decimalLatitude FROM tissueSamples WHERE NSWnumber IN (", paste(quotes(rownames(pcaTable), single = TRUE), collapse = ","),");"))
RSQLite::dbDisconnect(db)
rownames(DArT_data) <- DArT_data$NSWnumber
db <- RSQLite::dbConnect(SQLite(), .sqlPath_default)
DArT_data <- RSQLite::dbGetQuery(db, paste0("SELECT NSWnumber, eventKey, decimalLongitude, decimalLatitude FROM tissueSamples WHERE NSWnumber IN (", paste(quotes(rownames(pcaTable), single = TRUE), collapse = ","),");"))
RSQLite::dbDisconnect(db)
rownames(DArT_data) <- DArT_data$NSWnumber
library(RSQLite)
db <- RSQLite::dbConnect(SQLite(), .sqlPath_default)
DArT_data <- RSQLite::dbGetQuery(db, paste0("SELECT NSWnumber, eventKey, decimalLongitude, decimalLatitude FROM tissueSamples WHERE NSWnumber IN (", paste(quotes(rownames(pcaTable), single = TRUE), collapse = ","),");"))
RSQLite::dbDisconnect(db)
rownames(DArT_data) <- DArT_data$NSWnumber
source('~/Data_and_Projects/RBG Projects/Acacia provenances MS/bruteForceSearch_prelim.R')
source('~/Data_and_Projects/RBG Projects/Acacia provenances MS/bruteForceSearch_prelim.R')
View(DArT_data)
source('~/Data_and_Projects/RBG Projects/Acacia provenances MS/bruteForceSearch_prelim.R')
DArT_data
DArT_data$latitude
source('~/Data_and_Projects/RBG Projects/Acacia provenances MS/bruteForceSearch_prelim.R')
groupMem
View(stuff)
stuff <- data.frame(DArT_data[, c("longitude", "latitude")], grp = groupMem)
write.csv(stuff, paste0("/home/peterw/Data_and_Projects/RBG Projects/Acacia provenances MS/Results/", gsub(" ", "_", thisTaxon, fixed = TRUE), "_groupaissgnmentTable.csv"))
ans <- stuff %>% group_by(grp) %>% summarise_at(c("longitude", "latitude"), funs(mean))
library(dplyr)
source('~/Data_and_Projects/RBG Projects/Acacia provenances MS/bruteForceSearch_prelim.R')
source('~/Data_and_Projects/RBG Projects/Acacia provenances MS/bruteForceSearch.R')
focalTally[candidateFoci_rowNums,]
max(focalTally[,1])
max(focalTally[,2])
max(focalTally[,3])
max(focalTally[,4])
max(focalTally[,5])
candidateFoci_rowNums <- intersect(which(focalTally[,1] >= 5), which(focalTally[,4] >= 5))
ii <- intersect(which(max(focalTally[,1]), which(max(focalTally[,4]))))
ii <- intersect(which(focalTally[,1] == max(focalTally[,1]), which(focalTally[,4] == max(focalTally[,4]))))
ii <- intersect(which(focalTally[,1] == max(focalTally[,1]), which(focalTally[,4] == max(focalTally[,4]))))
ii <- intersect(which(focalTally[,1] == max(focalTally[,1])), which(focalTally[,4] == max(focalTally[,4])))
ii <- which(focalTally[,1] == max(focalTally[,1]))
focalTally[ii,]
jj <- which(trimmed_focalTally[, 4] == max(trimmed_focalTally[, 4]))
ii <- which(focalTally[, 1] == max(focalTally[, 1]))
trimmed_focalTally <- focalTally[ii, ]
jj <- which(trimmed_focalTally[, 4] == max(trimmed_focalTally[, 4]))
targetCells <- rownames(trimmed_focalTally)[jj]
targetCellsXY <- focalXY[targetCells,]
#colnames(focalTally) <- taxonList
rownames(focalXY) <- as.character(focalSet)
targetCellsXY <- focalXY[targetCells,]
plot(sydBasinPolygon)
points(targetCellsXY, pch = 16, col = "red", cex = 0.6)
points(focal_longitude, focal_latitude, pch = "+", col = "blue")
focal_longitude <- mean(targetCellsXY[1,])
focal_latitude <- mean(targetCellsXY[,2])
points(focal_longitude, focal_latitude, pch = "+", col = "blue")
# They a a tight cluster spanning the same location as the first run using
# un-cleanbed DArT sample locaitons. Looks like we can compute a mean long/lat
# value and run with that as the focal location
focal_longitude <- mean(targetCellsXY[,1])
focal_latitude <- mean(targetCellsXY[,2])
points(focal_longitude, focal_latitude, pch = "+", col = "blue")
write.csv(targetCellsXY, paste0("/home/peterw/Data_and_Projects/RBG Projects/Acacia provenances MS/siteSearch/focalTally_candidateSites_", searchDist,"m.csv"))
write.csv(data.frame(longitude = focal_longitude, latitude = focal_latitude), paste0("/home/peterw/Data_and_Projects/RBG Projects/Acacia provenances MS/siteSearch/focal_point_", searchDist,"m.csv"))
cat("    Search found", nrow(targetCellsXY), "multi-species sets\n")
library(RandR.db)
import_newApp_data()
import_newApp_data(commit = TRUE)
shiny::runApp('Data_and_Projects/RBG Projects/Restore and Renew/RandR_webtool_dev/RandR_modelReview_and_prep')
load("/home/peterw/Downloads/Untitled_Message/Acacia_terminalis_genetic_model.DQ_K3.Rd")
shiny::runApp('Data_and_Projects/RBG Projects/Restore and Renew/RandR_webtool_dev/RandR_modelReview_and_prep')
load("/home/peterw/Data_and_Projects/RBG Projects/Restore and Renew/RandR_webtool_dev/RandR_modelReview_and_prep/www/models/gdm/Acacia_suaveolens_genetic_model.Rd")
source('~/Data_and_Projects/MU Projects/VIP/R-scripts/explore_Complementarity_Dataset.R')
library(sf)
complCell_realm <-  st_intersects(compl_cellXY, realms)   #sp::over(compl_cellXY, realms)
?st_intersects
compl_cellXY <- data.frame(raster::xyFromCell(vip_template, as.numeric(compl$land_cells)))
st_coordinates(compl_cellXY) <- ~x + y
source('~/Data_and_Projects/MU Projects/VIP/R-scripts/explore_Complementarity_Dataset.R')
?st_coordinates
compl_cellXY_sf <- st_as_sf(compl_cellXY, c("x", "y"))
compl_cellXY_sf <- st_as_sf(compl_cellXY, coords = c("x", "y"))
compl_cellXY@proj4string <- realms@proj4string
compl_cellXY_sf@proj4string <- realms@proj4string
complCell_realm <-  st_intersects(compl_cellXY_sf, realms)   #sp::over(compl_cellXY, realms)
complCell_realm <-  st_intersection(compl_cellXY_sf, realms)   #sp::over(compl_cellXY, realms)
compl_cellXY_sf  <- st_transform(compl_cellXY_sf, crs = st_crs(realms))
st_crs(compl_cellXY_sf)  <- st_crs(realms)
complCell_realm <-  st_intersection(compl_cellXY_sf, realms)   #sp::over(compl_cellXY, realms)
st_crs(compl_cellXY_sf)
complCell_realm <-  st_intersect(compl_cellXY_sf, realms)   #sp::over(compl_cellXY, realms)
complCell_realm <-  st_intersects(compl_cellXY_sf, realms)   #sp::over(compl_cellXY, realms)
complCell_realm <-  st_intersects(compl_cellXY_sf, st_as_sf(realms))   #sp::over(compl_cellXY, realms)
realms@data
realmLookup <- data.frame(RealmID = c("NA", "AN", "PA", "NT", "AA", "RockAndIce", "IM", "OC", "AT"),
Ream = c("North American", "Antarctic", "Palearactic", "South American", "Australasian", "Rock and Ice", "Indo-Malayan", "Oceanic", "African"),
stringsAsFactors = FALSE)
rownames(realmLookup) <- as.character(0:8)
head(complCell_realm)
zz <- unlist(complCell_realm)
range(zz)
realmLookup <- data.frame(RealmID = c("NA", "AN", "PA", "NT", "AA", "RockAndIce", "IM", "OC", "AT"),
Ream = c("North American", "Antarctic", "Palearactic", "South American", "Australasian", "Rock and Ice", "Indo-Malayan", "Oceanic", "African"),
stringsAsFactors = FALSE)
realmLookup[zz[1:20],]
realmLookup <- data.frame(RealmID = c("NA", "AN", "PA", "NT", "AA", "RockAndIce", "IM", "OC", "AT"),
Realm = c("North American", "Antarctic", "Palearactic", "South American", "Australasian", "Rock and Ice", "Indo-Malayan", "Oceanic", "African"),
stringsAsFactors = FALSE)
realmLookup[zz[1:20],"Realm"]
realmLookup[zz[20000:20020],"Realm"]
compl_realm <- data.frame(compl, unlist(complCell_realm))
library(raster)
library(rgdal)
#library(sp)
library(sf)
realmLookup <- data.frame(RealmID = c("NA", "AN", "PA", "NT", "AA", "RockAndIce", "IM", "OC", "AT"),
Realm = c("North American", "Antarctic", "Palearactic", "South American", "Australasian", "Rock and Ice", "Indo-Malayan", "Oceanic", "African"),
stringsAsFactors = FALSE)
#rownames(realmLookup) <- as.character(0:8)
compl <- readRDS("/home/peterw/Downloads/complementarity_allgroups_1000_land.rds")
vip_template <- raster("/home/peterw/Downloads/template_world_Moll_10km.tif")
saveRas <- FALSE
#### Make rasters
mamm_compl <- vip_template
mamm_compl[as.numeric(compl$land_cells)] <- compl$mammals
#plot(mamm_compl, main = "Mammal complementarity")
if (saveRas) writeRaster(mamm_compl, "/home/peterw/Data_and_Projects/MU Projects/VIP/Results/ComplementarityRasters_May2020/Mammal_complementarity.tiff")
rept_compl <- vip_template
rept_compl[as.numeric(compl$land_cells)] <- compl$reptiles
#plot(rept_compl, main = "Reptile complementarity")
if (saveRas) writeRaster(rept_compl, "/home/peterw/Data_and_Projects/MU Projects/VIP/Results/ComplementarityRasters_May2020/Reptile_complementarity.tiff")
bird_compl <- vip_template
bird_compl[as.numeric(compl$land_cells)] <- compl$birds
#plot(bird_compl, main = "Bird complementarity")
if (saveRas) writeRaster(bird_compl, "/home/peterw/Data_and_Projects/MU Projects/VIP/Results/ComplementarityRasters_May2020/Bird_complementarity.tiff")
amphib_compl <- vip_template
amphib_compl[as.numeric(compl$land_cells)] <- compl$amphibians
#plot(amphib_compl, main = "Amphibian complementarity")
if (saveRas) writeRaster(amphib_compl, "/home/peterw/Data_and_Projects/MU Projects/VIP/Results/ComplementarityRasters_May2020/Amphibian_complementarity.tiff")
#### Get WWF Realm for cells in the complementarity dataset
realms <- readOGR("/home/peterw/Data_and_Projects/Mapdata/Biomes and ecoregions/WWF_Terrestrial_Ecoregions/WWF_Realms_Mollweide.shp")
compl_cellXY <- data.frame(raster::xyFromCell(vip_template, as.numeric(compl$land_cells)))
compl_cellXY_sf <- st_as_sf(compl_cellXY, coords = c("x", "y"))
st_crs(compl_cellXY_sf)  <- st_crs(realms)
complCell_realm <-  st_intersects(compl_cellXY_sf, st_as_sf(realms))   #sp::over(compl_cellXY, realms)
compl_realm <- data.frame(compl, unlist(complCell_realm))
any(duplicated(compl$land_cells))
str(compl_cellXY)
st_crs(compl_cellXY_sf)
class(complCell_realm)
str(complCell_realm)
zz <- unlist(complCell_realm)
?sgbp
zz <- as.matrix(complCell_realm)
head(zz)
thingy <- apply(zz, 1, which)
thingy <- unlist(apply(zz, 1, which))
thingy <- apply(zz, 1, which)
thingy_len <- unlist(lapply(thingy, length))
all(thingy_len == 1)
which(thingy_len != 1)
thingy_len[which(thingy_len != 1)]
range(thingy_len[which(thingy_len != 1)])
if (!all(thingy_len == 1))
deadCells <- which(thingy_len != 1)
zz[deadCells[1]]
zz[deadCells[1],]
doodah <- unlist(lapply(thingy), function(ii) {realmLookup[ii, "realm"]})
doodah <- unlist(lapply(thingy, function(ii) {realmLookup[ii, "realm"]}))
thingy[[1]]
doodah <- unlist(lapply(thingy, function(el) {realmLookup[el[1], "realm"]}))
doodah <- unlist(lapply(thingy, function(el) {realmLookup[el[1], "Realm"]}))
doodah[1]
doodah[deadCells[1]]
ans <- data.frame(compl, doodah, stringsAsFactors = FALSE)
write.csv(ans, "/home/peterw/Data_and_Projects/MU Projects/VIP/Results/complmentarity_realms.csv", row.names = FALSE)
install.packages("ggmap")
load(paste0("/home/peterw/Data_and_Projects/RBG Projects/Restore and Renew/RandR_webtool_dev/RandR_modelReview_and_prep/www/models/gdm/", gsub(" ", "_", thisTaxon, fixed = TRUE), "_genetic_model.Rd"))
thisTaxon <- taxonList[1]
taxonList <- c("Acacia linifolia", "Acacia longifolia", "Acacia suaveolens", "Acacia terminalis", "Acacia ulicifolia")
thresholdVals <- c(0.1, 0.2, 0.3)
taxonList <- c("Acacia linifolia", "Acacia longifolia", "Acacia suaveolens", "Acacia terminalis", "Acacia ulicifolia")
testLocation <- c(150.93, -34.03) # Just notth of Campbelltown in well-timbered area
thisTaxon <- taxonList[1]
load(paste0("/home/peterw/Data_and_Projects/RBG Projects/Restore and Renew/RandR_webtool_dev/RandR_modelReview_and_prep/www/models/gdm/", gsub(" ", "_", thisTaxon, fixed = TRUE), "_genetic_model.Rd"))
thisTaxon <- taxonList[2]
# We are 'borrrowing' modesl from the Shiny app RandR_modelReview_and_prep so make any adjustments to path names for covariate files, etc
load(paste0("/home/peterw/Data_and_Projects/RBG Projects/Restore and Renew/RandR_webtool_dev/RandR_modelReview_and_prep/www/models/gdm/", gsub(" ", "_", thisTaxon, fixed = TRUE), "_genetic_model.Rd"))
md$qdata@layers[[1]]@file@name
source('~/R-scripts/debug_webtool_siteMatch.R')
future_sp <- geojson_sp(future_json, crs = "+init=epsg:4326")
plot(future_sp)
source('~/R-scripts/debug_webtool_siteMatch.R')
plot(current_sp, col = "orange", add = TRUE)
current_json <- RandR_currentSiteMatch(testLocation[1], testLocation[2], c("MAT", "MAP"))
current_sp <- geojson_sp(current_json, crs = "+init=epsg:4326")
plot(current_sp, col = "orange", add = TRUE)
both <- makeSiteMatch(testLocation[1], testLocation[2], c("MAT", "MAP"), "rcp45", "2050")
plot(both$currentSiteMatch, col = "blue")
plot(both$futureSiteMatch, col = "orange", add = TRUE)
plot(geojson_sp(both$currentSiteMatch, crs = "+init=epsg:4326"), col = "blue")
plot(geojson_sp(both$futureSiteMatch, crs = "+init=epsg:4326"), col = "orange", add = TRUE)
source('~/R-scripts/debug_webtool_siteMatch.R')
plot(future_sp, col = "orange")
plot(current_sp, col = "blue", add = TRUE)
plot(geojson_sp(both$futureSiteMatch, crs = "+init=epsg:4326"), col = "orange", add = TRUE)
plot(geojson_sp(both$currentSiteMatch, crs = "+init=epsg:4326"), col = "blue")
source('~/R-scripts/debug_webtool_siteMatch.R')
plot(future_sp, col = "orange", ylim = c(-45, 16))
plot(current_sp, col = "blue", add = TRUE)
plot(future_sp, col = "orange", ylim = c(-38, -27))
plot(current_sp, col = "blue", add = TRUE)
source('~/R-scripts/debug_webtool_siteMatch.R')
source('~/R-scripts/debug_webtool_siteMatch.R')
source('~/R-scripts/debug_webtool_siteMatch.R')
source('~/R-scripts/debug_webtool_siteMatch.R')
zz <- geojson_sp(both$currentSiteMatch, crs = "+init=epsg:4326")
zz@bbox
crrent_json
current_json
library(geojson)
geo_bbox(current_json)
geo_bbox(future_json)
xx <- baseRas
baseRas@extent
bb <- RandR_futureSiteMatch(148, -32)
bb <- RandR_futureSiteMatch(148, -32, "rcp60")
bb <- RandR_futureSiteMatch(148, -32, rcp = "rcp60")
bb <- RandR_futureSiteMatch(148, -32, c("MAT", "MAP"), rcp = "rcp60")
bb <- RandR_futureSiteMatch(148, -32, c("MAT", "MAP"), rcp = "rcp60", epoch = 2050)
bb <- RandR_futureSiteMatch(148, -32, c("MAT", "MAP"), rcp = "rcp45", epoch = 2050)
source('~/R-scripts/debug_webtool_siteMatch.R')
source('~/Data_and_Projects/RBG Projects/Acacia provenances MS/Rscripts/comparisonGDM_thresholds.R')
source('~/Data_and_Projects/RBG Projects/Acacia provenances MS/Rscripts/comparisonGDM_thresholds.R')
library(RandR.modelReview)
source('~/Data_and_Projects/RBG Projects/Acacia provenances MS/Rscripts/comparisonGDM_thresholds.R')
source('~/Data_and_Projects/RBG Projects/Acacia provenances MS/Rscripts/comparisonGDM_thresholds.R')
load("/home/peterw/Data_and_Projects/RBG Projects/Restore and Renew/RandR_webtool_dev/RandR.modelReview/R/sysdata.rda")
source('~/Data_and_Projects/RBG Projects/Acacia provenances MS/Rscripts/comparisonGDM_thresholds.R')
source('~/Data_and_Projects/RBG Projects/Acacia provenances MS/Rscripts/comparisonGDM_thresholds.R')
source('~/Data_and_Projects/RBG Projects/Acacia provenances MS/Rscripts/comparisonGDM_thresholds.R')
source('~/Data_and_Projects/RBG Projects/Acacia provenances MS/Rscripts/comparisonGDM_thresholds.R')
source('~/Data_and_Projects/RBG Projects/Acacia provenances MS/Rscripts/comparisonGDM_thresholds.R')
source('~/Data_and_Projects/RBG Projects/Acacia provenances MS/Rscripts/comparisonGDM_thresholds.R')
source('~/Data_and_Projects/RBG Projects/Acacia provenances MS/Rscripts/comparisonGDM_thresholds.R')
source('~/Data_and_Projects/RBG Projects/Acacia provenances MS/Rscripts/comparisonGDM_thresholds.R')
source('~/Data_and_Projects/RBG Projects/Acacia provenances MS/Rscripts/comparisonGDM_thresholds.R')
library(RandR.modelReview)
library(leaflet)
library(mapview)
shiny::runApp('Data_and_Projects/RBG Projects/Restore and Renew/RandR_webtool_dev/RandR_modelReview_and_prep')
shiny::runApp('Data_and_Projects/RBG Projects/Restore and Renew/RandR_webtool_dev/RandR_modelReview_and_prep')
runApp('Data_and_Projects/RBG Projects/Restore and Renew/RandR_webtool_dev/RandR_modelReview_and_prep')
source('~/Data_and_Projects/RBG Projects/Acacia provenances MS/Rscripts/comparisonGDM_thresholds2.R')
source('~/Data_and_Projects/RBG Projects/Acacia provenances MS/Rscripts/comparisonGDM_thresholds2.R')
gdmResult <- RandR.modelReview::RandR_GDM_prediction(longitude = testLocation[1],
latitude = testLocation[2],
taxonName = thisTaxon,
modelPath = gdmPath,
threshold = thisThreshold)
domainPath <- paste0("/home/peterw/Data_and_Projects/RBG Projects/Restore and Renew/RandR_webtool_dev/RandR_modelReview_and_prep/www/models/domain/", gsub(" ", "_", thisTaxon, fixed = TRUE), "_domain_clipped.Rd")
thisDomain <- geojsonio::geojson_read(domainPath)
source('~/Data_and_Projects/RBG Projects/Acacia provenances MS/Rscripts/comparisonGDM_thresholds2.R')
source('~/Data_and_Projects/RBG Projects/Acacia provenances MS/Rscripts/comparisonGDM_thresholds2.R')
source('~/Data_and_Projects/RBG Projects/Acacia provenances MS/Rscripts/comparisonGDM_thresholds2.R')
source('~/Data_and_Projects/RBG Projects/Restore and Renew/RandR_webtool_dev/RandR_modelReview_and_prep/clipDomainPolygon.R')
runApp('Data_and_Projects/RBG Projects/Restore and Renew/RandR_webtool_dev/RandR_modelReview_and_prep')
runApp('Data_and_Projects/RBG Projects/Restore and Renew/RandR_webtool_dev/RandR_modelReview_and_prep')
