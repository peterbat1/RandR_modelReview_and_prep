sort(unique(d$basisOfRecord))
d <- d[d$basisOfRecord == "PreservedSpecimen", ]
taxa <- sort(unique(d$scientificName))
stuff <- d[d$scientificName == taxa[1], ]
View(stuff)
source('~/Data_and_Projects/RBG Projects/Restore and Renew/R-scripts/GDM_3D_trials_plotly.R')
thePlot
thePlot <- plot_ly(baseMap)# %>% add_surface(x = ~x, y = ~y, z = ~testMat)
thePlot
thePlot <- plot_ly(baseMap) %>% add_surface(x = ~x, y = ~y, z = ~testMat)
thePlot
?plot_geo
thePlot <- plot_geo(baseMap) %>% add_surface(x = ~x, y = ~y, z = ~testMat)
thePlot
source('~/Data_and_Projects/RBG Projects/Restore and Renew/R-scripts/GDM_3D_trials.R')
load("/home/peterw/Data_and_Projects/RBG Projects/Restore and Renew/RandR_webtool_dev/RandR.modelReview/R/sysdata.rda")
baseRas_recoded <- baseRas
baseRas_recoded[!is.na(baseRas_recoded[])] <- 0.005
plot(baseRas_recoded)
outputRas <- baseRas_recoded + testRas
plot(outputRas)
plot3D(outputRas,
col = heat.colors,
adjust = FALSE)
source('~/R-scripts/GDM_3D_trials_basemap.R')
click()
source('~/R-scripts/GDM_3D_trials_basemap.R')
source('~/R-scripts/GDM_3D_trials_basemap.R')
?raster::sum
source('~/R-scripts/GDM_3D_trials_basemap.R')
source('~/R-scripts/GDM_3D_trials_basemap.R')
?points3d
z <- gdmRas[cellFromXY(gdmRas, testPt)]
source('~/R-scripts/GDM_3D_trials_basemap.R')
source('~/R-scripts/GDM_3D_trials_basemap.R')
source('~/R-scripts/GDM_3D_trials_basemap.R')
source('~/R-scripts/GDM_3D_trials_basemap.R')
source('~/R-scripts/GDM_3D_trials_basemap.R')
source('~/R-scripts/GDM_3D_trials_basemap.R')
source('~/R-scripts/GDM_3D_trials_basemap.R')
source('~/R-scripts/GDM_3D_trials_basemap.R')
source('~/R-scripts/GDM_3D_trials_basemap.R')
source('~/R-scripts/GDM_3D_trials_basemap.R')
plot3D(outputRas,
col = rainbow,
adjust = FALSE)
#points3d(x = testPt[1], y = testPt[2], z = z + 0.0005 , add = TRUE)
segments3d(x = c(testPt[1], testPt[1]),
y = c(testPt[2], testPt[2]),
z = c(0, 1),
col = "orange")
source('~/R-scripts/GDM_3D_trials_basemap.R')
source('~/R-scripts/GDM_3D_trials_basemap.R')
source('~/R-scripts/GDM_3D_trials_basemap.R')
source('~/R-scripts/GDM_3D_trials_basemap.R')
source('~/R-scripts/GDM_3D_trials_basemap.R')
source('~/R-scripts/GDM_3D_trials_basemap.R')
comboData <- readRDS("/home/peterw/Data_and_Projects/MU Projects/VIP/R-scripts/VIP-explorer/combined.rds")
head(comboData)
hist(comboData$landuse_rcp45_2050)
hist(comboData$clim_rcp45_2050)
hist(comboData$clim_rcp45_2070)
hist(comboData$clim_rcp85_2050)
hist(comboData$clim_rcp85_2070)
hist(comboData$compPD_amph)
hist(comboData$compPD_bird)
hist(comboData$compPD_mamm)
hist(comboData$compPD_squa)
hist(comboData$compSD_amph)
library(ggplot2)
library(ggcorrplot)
library(ggExtra)
#########################################
doScatterplot <- function(data, outFile, xVarName, yVarName, xLabel, yLabel, plotLabel, pointColour)
{
png(outFile)
newPlot <- ggplot(data, aes_string(x = xVarName, y = yVarName)) +
geom_point(colour = pointColour) +
labs(title = plotLabel) +
xlab(xLabel) +
ylab(yLabel)
print(newPlot)
dev.off()
}
doScatterplotWithMarginals <- function(data, outFile, xVarName, yVarName, xLabel, yLabel, plotLabel, pointColour)
{
png(outFile)
newPlot <- ggplot(data, aes_string(x = xVarName, y = yVarName)) +
geom_point(colour = pointColour) +
labs(title = plotLabel) +
xlab(xLabel) +
ylab(yLabel)
marginalPlot <- ggExtra::ggMarginal(newPlot, type = "histogram")
print(marginalPlot)
dev.off()
}
#########################################
doScatterplotWithLine <- function(data, outFile, xVarName, yVarName, xLabel, yLabel, plotLabel, pointColour)
{
png(outFile)
newPlot <- ggplot(data, aes_string(x = xVarName, y = yVarName)) +
geom_point(colour = pointColour) +
labs(title = plotLabel) +
xlab(xLabel) +
ylab(yLabel) +
geom_abline(intercept = 0, slope = 1)
print(newPlot)
dev.off()
}
#d <- readRDS("/home/peterw/Data_and_Projects/MU Projects/VIP/Results/PDW_data_2020-02-03.rds")
d <- readRDS("/home/peterw/Data_and_Projects/MU Projects/VIP/R-scripts/VIP-explorer/combined.rds")
badInd <- which(is.na(d$habDiff_2015_rcp45_2050))
d <- d[-badInd, ]
d <- d[, -1]
clades <- c("Mammals", "Birds", "Amphibians", "Squamates")
plotColours <- c("mediumorchid1", "royalblue1", "chartreuse", "tomato1")
names(plotColours) <- clades
rcpList <- c("rcp45", "rcp85")
epochList <- c("2050", "2070")
compAbbrev <- c("comp_mamm", "comp_bird", "comp_amph", "comp_sqau")
names(compAbbrev) <- clades
####### SD_Complementarity versus Habitat change
for (thisClade in clades)
{
for (thisRCP in rcpList)
{
for (thisEpoch in epochList)
{
rcp <- gsub(".", "", tolower(thisRCP), fixed = TRUE)
doScatterplot(d,
paste0("/home/peterw/Data_and_Projects/MU Projects/VIP/Results/Jul2020_EDA/EDA_SD_Complementarity_landuse_", rcp, "_", thisEpoch, "_", thisClade, ".png"),
paste0("landuse_", rcp, "_", thisEpoch),
compAbbrev[thisClade],
paste("Habitat change", thisEpoch),
"SD Complementarity",
paste(thisClade, thisRCP, thisEpoch),
plotColours[thisClade])
doScatterplotWithMarginals(d,
paste0("/home/peterw/Data_and_Projects/MU Projects/VIP/Results/Jul2020_EDA/EDA_SD_Complementarity_landuse_", rcp, "_", thisEpoch, "_", thisClade, "_marginalHist.png"),
paste0("landuse_", rcp, "_", thisEpoch),
compAbbrev[thisClade],
paste("Habitat change", thisEpoch),
"SD Complementarity",
paste(thisClade, thisRCP, thisEpoch),
plotColours[thisClade])
}
}
}
clades <- c("Mammals", "Birds", "Amphibians", "Squamates", "Crocodiles", "Turtles")
plotColours <- c("mediumorchid1", "royalblue1", "chartreuse", "tomato1", "tan1", "skyblue1")
names(plotColours) <- clades
rcpList <- c("rcp45", "rcp85")
epochList <- c("2050", "2070")
compAbbrev_SD <- c("compSD_mamm", "compSD_bird", "compSD_amph", "compSD_sqau", "compSD_croc", "compSD_turt")
names(compAbbrev_SD) <- clades
####### SD_Complementarity versus Habitat change
for (thisClade in clades)
{
for (thisRCP in rcpList)
{
for (thisEpoch in epochList)
{
rcp <- gsub(".", "", tolower(thisRCP), fixed = TRUE)
doScatterplot(d,
paste0("/home/peterw/Data_and_Projects/MU Projects/VIP/Results/Jul2020_EDA/EDA_SD_Complementarity_landuse_", rcp, "_", thisEpoch, "_", thisClade, ".png"),
paste0("landuse_", rcp, "_", thisEpoch),
compAbbrev_SD[thisClade],
paste("Habitat change", thisEpoch),
"SD Complementarity",
paste(thisClade, thisRCP, thisEpoch),
plotColours[thisClade])
doScatterplotWithMarginals(d,
paste0("/home/peterw/Data_and_Projects/MU Projects/VIP/Results/Jul2020_EDA/EDA_SD_Complementarity_landuse_", rcp, "_", thisEpoch, "_", thisClade, "_marginalHist.png"),
paste0("landuse_", rcp, "_", thisEpoch),
compAbbrev_SD[thisClade],
paste("Habitat change", thisEpoch),
"SD Complementarity",
paste(thisClade, thisRCP, thisEpoch),
plotColours[thisClade])
}
}
}
head(d)
d <- readRDS("/home/peterw/Data_and_Projects/MU Projects/VIP/R-scripts/VIP-explorer/combined.rds")
badInd <- which(is.na(d$clim_rcp45_2050))
d <- d[-badInd, ]
d <- d[, -1]
clades <- c("Mammals", "Birds", "Amphibians", "Squamates", "Crocodiles", "Turtles")
plotColours <- c("mediumorchid1", "royalblue1", "chartreuse", "tomato1", "tan1", "skyblue1")
names(plotColours) <- clades
rcpList <- c("rcp45", "rcp85")
epochList <- c("2050", "2070")
compAbbrev_SD <- c("compSD_mamm", "compSD_bird", "compSD_amph", "compSD_sqau", "compSD_croc", "compSD_turt")
names(compAbbrev_SD) <- clades
####### SD_Complementarity versus Habitat change
for (thisClade in clades)
{
for (thisRCP in rcpList)
{
for (thisEpoch in epochList)
{
rcp <- gsub(".", "", tolower(thisRCP), fixed = TRUE)
doScatterplot(d,
paste0("/home/peterw/Data_and_Projects/MU Projects/VIP/Results/Jul2020_EDA/EDA_SD_Complementarity_landuse_", rcp, "_", thisEpoch, "_", thisClade, ".png"),
paste0("landuse_", rcp, "_", thisEpoch),
compAbbrev_SD[thisClade],
paste("Habitat change", thisEpoch),
"SD Complementarity",
paste(thisClade, thisRCP, thisEpoch),
plotColours[thisClade])
doScatterplotWithMarginals(d,
paste0("/home/peterw/Data_and_Projects/MU Projects/VIP/Results/Jul2020_EDA/EDA_SD_Complementarity_landuse_", rcp, "_", thisEpoch, "_", thisClade, "_marginalHist.png"),
paste0("landuse_", rcp, "_", thisEpoch),
compAbbrev_SD[thisClade],
paste("Habitat change", thisEpoch),
"SD Complementarity",
paste(thisClade, thisRCP, thisEpoch),
plotColours[thisClade])
}
}
}
warnings()
compAbbrev_SD <- c("compSD_mamm", "compSD_bird", "compSD_amph", "compSD_squa", "compSD_croc", "compSD_turt")
names(compAbbrev_SD) <- clades
####### SD_Complementarity versus Habitat change
for (thisClade in clades)
{
for (thisRCP in rcpList)
{
for (thisEpoch in epochList)
{
rcp <- gsub(".", "", tolower(thisRCP), fixed = TRUE)
doScatterplot(d,
paste0("/home/peterw/Data_and_Projects/MU Projects/VIP/Results/Jul2020_EDA/EDA_SD_Complementarity_landuse_", rcp, "_", thisEpoch, "_", thisClade, ".png"),
paste0("landuse_", rcp, "_", thisEpoch),
compAbbrev_SD[thisClade],
paste("Habitat change", thisEpoch),
"SD Complementarity",
paste(thisClade, thisRCP, thisEpoch),
plotColours[thisClade])
doScatterplotWithMarginals(d,
paste0("/home/peterw/Data_and_Projects/MU Projects/VIP/Results/Jul2020_EDA/EDA_SD_Complementarity_landuse_", rcp, "_", thisEpoch, "_", thisClade, "_marginalHist.png"),
paste0("landuse_", rcp, "_", thisEpoch),
compAbbrev_SD[thisClade],
paste("Habitat change", thisEpoch),
"SD Complementarity",
paste(thisClade, thisRCP, thisEpoch),
plotColours[thisClade])
}
}
}
for (thisClade in clades)
{
for (thisRCP in rcpList)
{
for (thisEpoch in epochList)
{
rcp <- gsub(".", "", tolower(thisRCP), fixed = TRUE)
doScatterplot(d,
paste0("/home/peterw/Data_and_Projects/MU Projects/VIP/Results/EDA_SD_Complementarity_climNovelty_", rcp, "_", thisEpoch, "_", thisClade, ".png"),
paste0("climNov_", rcp, "_", thisEpoch),
compAbbrev_SD[thisClade],
paste("Climate novelty", thisEpoch),
"SD Complementarity",
paste(thisClade, thisRCP, thisEpoch),
plotColours[thisClade])
doScatterplotWithMarginals(d,
paste0("/home/peterw/Data_and_Projects/MU Projects/VIP/Results/EDA_SD_Complementarity_climNovelty_", rcp, "_", thisEpoch, "_", thisClade, "_marginalHist.png"),
paste0("climNov_", rcp, "_", thisEpoch),
compAbbrev_SD[thisClade],
paste("Climate novelty", thisEpoch),
"SD Complementarity",
paste(thisClade, thisRCP, thisEpoch),
plotColours[thisClade])
}
}
}
for (thisClade in clades)
{
for (thisRCP in rcpList)
{
for (thisEpoch in epochList)
{
rcp <- gsub(".", "", tolower(thisRCP), fixed = TRUE)
doScatterplot(d,
paste0("/home/peterw/Data_and_Projects/MU Projects/VIP/Results/EDA_SD_Complementarity_climNovelty_", rcp, "_", thisEpoch, "_", thisClade, ".png"),
paste0("clim_", rcp, "_", thisEpoch),
compAbbrev_SD[thisClade],
paste("Climate novelty", thisEpoch),
"SD Complementarity",
paste(thisClade, thisRCP, thisEpoch),
plotColours[thisClade])
doScatterplotWithMarginals(d,
paste0("/home/peterw/Data_and_Projects/MU Projects/VIP/Results/EDA_SD_Complementarity_climNovelty_", rcp, "_", thisEpoch, "_", thisClade, "_marginalHist.png"),
paste0("clim_", rcp, "_", thisEpoch),
compAbbrev_SD[thisClade],
paste("Climate novelty", thisEpoch),
"SD Complementarity",
paste(thisClade, thisRCP, thisEpoch),
plotColours[thisClade])
}
}
}
png("/home/peterw/Data_and_Projects/MU Projects/VIP/Results/Jul2020_EDA/EDA_correlationPlot.png")
dCorr <- cor(d, method = "pearson")
corrPlot <- ggcorrplot(dCorr, method = "circle")
print(corrPlot)
dev.off()
?cor
png("/home/peterw/Data_and_Projects/MU Projects/VIP/Results/Jul2020_EDA/EDA_correlationPlot.png")
dCorr <- cor(d, method = "pearson", use = "complete")
corrPlot <- ggcorrplot(dCorr, method = "circle")
print(corrPlot)
dev.off()
png("/home/peterw/Data_and_Projects/MU Projects/VIP/Results/Jul2020_EDA/EDA_correlationPlot.png", width = 1024, height = 1024)
dCorr <- cor(d, method = "pearson", use = "complete")
corrPlot <- ggcorrplot(dCorr, method = "circle")
print(corrPlot)
dev.off()
shiny::runApp('Data_and_Projects/RBG Projects/Restore and Renew/RandR_webtool_dev/RandR_modelReview_and_prep')
runApp('Data_and_Projects/RBG Projects/Restore and Renew/RandR_webtool_dev/RandR_modelReview_and_prep')
runApp('Data_and_Projects/RBG Projects/Restore and Renew/RandR_webtool_dev/RandR_modelReview_and_prep')
runApp('Data_and_Projects/RBG Projects/Restore and Renew/RandR_webtool_dev/RandR_modelReview_and_prep')
runApp('Data_and_Projects/RBG Projects/Restore and Renew/RandR_webtool_dev/RandR_modelReview_and_prep')
source('~/R-scripts/GDM_3D_trials_basemap.R')
source('~/R-scripts/GDM_3D_trials_basemap.R')
runApp('Data_and_Projects/RBG Projects/Restore and Renew/RandR_webtool_dev/RandR_modelReview_and_prep')
runApp('Data_and_Projects/RBG Projects/Restore and Renew/RandR_webtool_dev/RandR_modelReview_and_prep')
install.packages("shinyBS")
install.packages("shinyRGL")
runApp('Data_and_Projects/RBG Projects/Restore and Renew/RandR_webtool_dev/RandR_modelReview_and_prep')
runApp('Data_and_Projects/RBG Projects/Restore and Renew/RandR_webtool_dev/RandR_modelReview_and_prep')
extent(baseRas)
runApp('Data_and_Projects/RBG Projects/Restore and Renew/RandR_webtool_dev/RandR_modelReview_and_prep')
source('~/R-scripts/GDM_3D_trials_basemap.R')
source('~/R-scripts/GDM_3D_trials_basemap.R')
plot3D(outputRas,
col = rainbow,
adjust = FALSE)
source('~/R-scripts/GDM_3D_trials_basemap.R')
source('~/R-scripts/GDM_3D_trials_basemap.R')
source('~/R-scripts/GDM_3D_trials_basemap.R')
shiny::runApp('Data_and_Projects/RBG Projects/Restore and Renew/RandR_webtool_dev/RandR_modelReview_and_prep')
runApp('Data_and_Projects/RBG Projects/Restore and Renew/RandR_webtool_dev/RandR_modelReview_and_prep')
class(extent(outputRas))
extent(outputRas)@xmin
x <- seq(extent(outputRas)@xmin, extent(156), res(outputRas)[1])
x <- seq(extent(outputRas)@xmin, extent(outputRas)@xmax, res(outputRas)[1])
ncol(outputRas)
x <- xFromCol(outputRas, 1:ncol(outputRas))
x[1]
runApp('Data_and_Projects/RBG Projects/Restore and Renew/RandR_webtool_dev/RandR_modelReview_and_prep')
runApp('Data_and_Projects/RBG Projects/Restore and Renew/RandR_webtool_dev/RandR_modelReview_and_prep')
rainbow
?rainbow
runApp('Data_and_Projects/RBG Projects/Restore and Renew/RandR_webtool_dev/RandR_modelReview_and_prep')
runApp('Data_and_Projects/RBG Projects/Restore and Renew/RandR_webtool_dev/RandR_modelReview_and_prep')
X
runApp('Data_and_Projects/RBG Projects/Restore and Renew/RandR_webtool_dev/RandR_modelReview_and_prep')
View(Z)
dim(Z)
length(X)
runApp('Data_and_Projects/RBG Projects/Restore and Renew/RandR_webtool_dev/RandR_modelReview_and_prep')
runApp('Data_and_Projects/RBG Projects/Restore and Renew/RandR_webtool_dev/RandR_modelReview_and_prep')
runApp('Data_and_Projects/RBG Projects/Restore and Renew/RandR_webtool_dev/RandR_modelReview_and_prep')
runApp('Data_and_Projects/RBG Projects/Restore and Renew/RandR_webtool_dev/RandR_modelReview_and_prep')
runApp('Data_and_Projects/RBG Projects/Restore and Renew/RandR_webtool_dev/RandR_modelReview_and_prep')
runApp('Data_and_Projects/RBG Projects/Restore and Renew/RandR_webtool_dev/RandR_modelReview_and_prep')
runApp('Data_and_Projects/RBG Projects/Restore and Renew/RandR_webtool_dev/RandR_modelReview_and_prep')
install.packages("plot3Drgl")
source('~/Data_and_Projects/RBG Projects/Restore and Renew/R-scripts/GDM_3D_trials_plot3D.R')
source('~/Data_and_Projects/RBG Projects/Restore and Renew/R-scripts/GDM_3D_trials_plot3D.R')
source('~/Data_and_Projects/RBG Projects/Restore and Renew/R-scripts/GDM_3D_trials_plot3D.R')
dim(testMat)
source('~/Data_and_Projects/RBG Projects/Restore and Renew/R-scripts/GDM_3D_trials_plot3D.R')
source('~/Data_and_Projects/RBG Projects/Restore and Renew/R-scripts/GDM_3D_trials_plot3D.R')
shiny::runApp('Data_and_Projects/RBG Projects/Restore and Renew/RandR_webtool_dev/RandR_modelReview_and_prep')
shiny::runApp()
shiny::runApp()
?bsModal
?shinyBS::bsModal
shinyBS::bsExample("Modals")
library(gdm)
library(raster)
library(rgl)
library(sf)
library(fasterize)
taxonName <- "Acacia linifolia"
taxon_Name <- gsub(" ", "_", taxonName)
model_folder <- "/home/peterw/Data_and_Projects/RBG Projects/Restore and Renew/RandR_webtool_dev/RandR_modelReview_and_prep/www/models/gdm/"
bounds_folder <- "/home/peterw/Data_and_Projects/RBG Projects/Restore and Renew/RandR_webtool_dev/RandR_modelReview_and_prep/www/models/domain/"
bounds_poly_name <- paste0(bounds_folder, "/", taxon_Name, "_domain_clipped.geojson")
landsea_mask <- raster::raster("/home/peterw/Data_and_Projects/RBG Projects/Restore and Renew/RandR_webtool_dev/RandR_modelReview_and_prep/www/resources/landsea_mask.tif")
load(paste0(model_folder, taxon_Name, "_genetic_model.Rd"))
test_long <- 150.5
test_lat <- -33.5
s1_point <- c(test_long, test_lat)
bounds_poly <- sf::st_read(bounds_poly_name)
sf::st_crs(bounds_poly) <- 4326
bounds_ras <- fasterize::fasterize(bounds_poly, landsea_mask)
sessionDir <- tempdir()
hotCells <- which(raster::values(bounds_ras) == 1)
# Make prediction data.frame
s2_ll <- raster::xyFromCell(bounds_ras, hotCells)
null_dist  <- rep(1, nrow(s2_ll))
null_wght  <- rep(1, nrow(s2_ll))
s1_ll <- cbind(rep(s1_point[1], nrow(s2_ll)), rep(s1_point[2], nrow(s2_ll)))
gdm_prd <- data.frame(distance = null_dist,
weights = null_wght,
s1.xCoord = rep(s1_point[1], nrow(s2_ll)),
s1.yCoord = rep(s1_point[2], nrow(s2_ll)),
s2.xCoord = s2_ll[,1],
s2.yCoord = s2_ll[,2])
# Add other predictors as indicated by flags in the gdm object
if(md$Q)
{
qdata <- raster::stack(md$qdata)
s1_Q  <- raster::extract(qdata, s1_ll)
s2_Q  <- raster::extract(qdata, s2_ll)
colnames(s1_Q) <- paste0("s1.Q", 1:ncol(s1_Q))
colnames(s2_Q) <- paste0("s2.Q", 1:ncol(s2_Q))
gdm_prd   <- cbind(gdm_prd, s1_Q, s2_Q)
}
if(md$E)
{
edata  <- raster::stack(md$edata)
enames <- names(edata)
s1_E  <- raster::extract(edata, s1_ll)
s2_E  <- raster::extract(edata, s2_ll)
colnames(s1_E) <- paste0("s1.", enames, 1:ncol(s1_E))
colnames(s2_E) <- paste0("s2.", enames, 1:ncol(s2_E))
gdm_prd   <- cbind(gdm_prd, s1_E, s2_E)
# in case environmental variable undefined in parts of srast
gdm_prd <- gdm_prd[ rowSums(is.na(gdm_prd)) <= 0, ]
s2_ll   <- gdm_prd[, 5:6]
}
rawPred <- predict(md$model, gdm_prd)
pred_ras <- landsea_mask
cellInd <- raster::cellFromXY(pred_ras, s2_ll)
#print(cellInd)
raster::values(pred_ras) <- NA
raster::values(pred_ras)[cellInd] <- rawPred
pred_ras_cropped <- raster::crop(pred_ras, raster::extent(sf::st_bbox(bounds_poly)))
na_ind <- which(is.na(raster::values(pred_ras_cropped)))
if (length(na_ind) > 0) pred_ras_cropped[na_ind] <- 0
cell_coords <- raster::xyFromCell(pred_ras_cropped, 1:ncell(pred_ras_cropped))
pred_ras_matrix <- cbind(cell_coords, raster::extract(pred_ras_cropped, cell_coords))
mesh <- rgl::as.mesh3d(pred_ras_matrix, type = "points")
gc()
?raster:;aggregate
?raster::aggregate
# Aggregate to a coarser raster to easy computational burden
agg_ras <- raster::aggregate(pred_ras_cropped, factor = 4)
# Aggregate to a coarser raster to easy computational burden
agg_ras <- raster::aggregate(pred_ras_cropped, factor = 4)
pred_ras_cropped <- raster::crop(pred_ras, raster::extent(sf::st_bbox(bounds_poly)))
na_ind <- which(is.na(raster::values(pred_ras_cropped)))
if (length(na_ind) > 0) pred_ras_cropped[na_ind] <- 0
# Aggregate to a coarser raster to easy computational burden
agg_ras <- raster::aggregate(pred_ras_cropped, factor = 4)
plot(pred_ras_cropped)
# Aggregate to a coarser raster to easy computational burden
agg_ras <- raster::aggregate(x = pred_ras_cropped, fact = 4)
plot(agg_ras)
source("~/Data_and_Projects/RBG Projects/Restore and Renew/R-scripts/gdm_3d_plot_dev.R")
gc()
plot(pred_ras_cropped)
plot(agg_ras)
cell_coords <- raster::xyFromCell(agg_ras, 1:ncell(agg_ras))
agg_ras_matrix <- cbind(cell_coords, raster::extract(agg_ras, cell_coords))
mesh <- rgl::as.mesh3d(agg_ras_matrix, type = "points")
plot3d(mesh)
plot3d(mesh, type = "dots")
open3d()
plot3d(mesh, type = "dots")
open3d()
plot3d(mesh, type = "dots")
open3d()
plot3d(agg_ras_matrix)
set3d()
open3d()
plot3d(agg_ras_matrix)
persp3d(agg_ras_matrix)
open3d()
persp3d(agg_ras_matrix)
library(MASS)
# from the fitdistr example
set.seed(123)
x <- rgamma(100, shape = 5, rate = 0.1)
fit <- fitdistr(x, dgamma, list(shape = 1, rate = 0.1), lower = 0.001)
loglik <- function(shape, rate) sum(dgamma(x, shape=shape, rate=rate,
log=TRUE))
loglik <- Vectorize(loglik)
xlim <- fit$estimate[1]+4*fit$sd[1]*c(-1,1)
ylim <- fit$estimate[2]+4*fit$sd[2]*c(-1,1)
mfrow3d(1, 2, sharedMouse = TRUE)
persp3d(loglik,
xlim = xlim, ylim = ylim,
n = 30)
detach("package:rgl", unload = TRUE)
remove.packages("rgl", lib="~/R/x86_64-pc-linux-gnu-library/4.2")
install.packages("rgl")
remove.packages("rgl", lib="~/R/x86_64-pc-linux-gnu-library/4.2")
install.packages("rgl")
source("~/Data_and_Projects/RBG Projects/Restore and Renew/R-scripts/gdm_3d_plot_dev.R")
remove.packages("rgl", lib="~/R/x86_64-pc-linux-gnu-library/4.2")
install.packages("rgl")
source("~/Data_and_Projects/RBG Projects/Restore and Renew/R-scripts/gdm_3d_plot_dev.R")
install.packages(c("abess", "ade4", "adehabitatHR", "adehabitatHS", "adehabitatLT", "adehabitatMA", "ads", "amap", "arules", "bartMachine", "bartMachineJARs", "bbotk", "BDgraph", "BiodiversityR", "bit", "bookdown", "Boruta", "brew", "Brobdingnag", "broom", "bslib", "C50", "callr", "car", "changepoint", "chron", "classInt", "cli", "cluster", "collapse", "commonmark", "CORElearn", "cpp11", "crayon", "crul", "ctv", "Cubist", "curl", "data.table", "date", "dbmss", "desc", "deSolve", "devtools", "dials", "digest", "dipm", "dismo", "Distance", "dotCall64", "dplyr", "e1071", "ecespa", "evaluate", "exactextractr", "fontawesome", "forecast", "fracdiff", "FRK", "fso", "future", "future.apply", "GA", "galah", "gam", "gamlss.dist", "gdalcubes", "gdistance", "gee", "geodist", "geojsonio", "geometa", "geos", "geosphere", "geouy", "gert", "gganimate", "ggcorrplot", "ggforce", "ggformula", "ggmap", "ggplot2", "ggpubr", "ggrepel", "ggridges", "ggsignif", "ggstance", "gh", "gitcreds", "gld", "globals", "gmp", "gstat", "gsw", "gtable", "h2o", "haven", "httpuv", "httr2", "ibdreg", "ICEbox", "igraph", "infer", "insight", "isoband", "jsonify", "jsonlite", "keyring", "kinship2", "knitr", "labelled", "landscapemetrics", "lava", "lgr", "libgeos", "lifecycle", "lightgbm", "link2GI", "lme4", "lpSolve", "lubridate", "lwgeom", "magic", "mapdata", "mapproj", "maps", "maptools", "markdown", "marmap", "matrixcalc", "MatrixModels", "mclust", "mgcv", "minqa", "mlpack", "mlr3", "mlr3learners", "mlr3misc", "mlr3tuning", "mlt", "modeldata", "mosaicCore", "mrds", "MuMIn", "nlme", "nnet", "oai", "openair", "openssl", "orthopolynom", "osmextract", "ows4R", "parsnip", "party", "pbapply", "PBSmapping", "pkgload", "plyr", "polyclip", "pracma", "PReMiuM", "processx", "progressr", "protolite", "ps", "purrr", "R.utils", "R2admb", "ragg", "ramps", "randtoolbox", "raster", "rbibutils", "Rborist", "RcppArmadillo", "RcppEigen", "RcppGSL", "RCurl", "RCzechia", "readr", "recipes", "reproj", "reticulate", "rgbif", "rgdal", "rgee", "RGF", "rgrass", "rgrass7", "rgugik", "rioja", "rje", "rlang", "rlas", "Rmalschains", "rmarkdown", "rngWELL", "roxygen2", "rpart", "RSQLite", "rstatix", "rstudioapi", "rversions", "RXshrink", "secr", "segmented", "sensitivity", "servr", "sf", "shapefiles", "shiny", "slider", "smerc", "sp", "spaMM", "sparr", "SpatialKDE", "spatialreg", "spatstat", "spatstat.data", "spatstat.geom", "spatstat.linnet", "spatstat.random", "spatstat.sparse", "spatstat.utils", "Spbsampling", "spData", "spdep", "sperrorest", "spmoran", "spsur", "spTimer", "styler", "surveillance", "synthACS", "sys", "testthat", "tfruns", "tgp", "tidycensus", "tidyr", "tidyselect", "timeDate", "tinytex", "topmodel", "torch", "traipse", "tram", "tseries", "tune", "tweenr", "urca", "V8", "vapour", "vcr", "vctrs", "vegan", "visNetwork", "vroom", "webshot", "whitebox", "wk", "wkutils", "workflows", "xfun", "XML", "xts", "yaml", "yardstick", "zip", "zoo"))
install.packages(c("abess", "ade4", "adehabitatHR", "adehabitatHS", "adehabitatLT", "adehabitatMA", "ads", "amap", "arules", "bartMachine", "bartMachineJARs", "bbotk", "BDgraph", "BiodiversityR", "bit", "bookdown", "Boruta", "brew", "Brobdingnag", "broom", "bslib", "C50", "callr", "car", "changepoint", "chron", "classInt", "cli", "cluster", "collapse", "commonmark", "CORElearn", "cpp11", "crayon", "crul", "ctv", "Cubist", "curl", "data.table", "date", "dbmss", "desc", "deSolve", "devtools", "dials", "digest", "dipm", "dismo", "Distance", "dotCall64", "dplyr", "e1071", "ecespa", "evaluate", "exactextractr", "fontawesome", "forecast", "fracdiff", "FRK", "fso", "future", "future.apply", "GA", "galah", "gam", "gamlss.dist", "gdalcubes", "gdistance", "gee", "geodist", "geojsonio", "geometa", "geos", "geosphere", "geouy", "gert", "gganimate", "ggcorrplot", "ggforce", "ggformula", "ggmap", "ggplot2", "ggpubr", "ggrepel", "ggridges", "ggsignif", "ggstance", "gh", "gitcreds", "gld", "globals", "gmp", "gstat", "gsw", "gtable", "h2o", "haven", "httpuv", "httr2", "ibdreg", "ICEbox", "igraph", "infer", "insight", "isoband", "jsonify", "jsonlite", "keyring", "kinship2", "knitr", "labelled", "landscapemetrics", "lava", "lgr", "libgeos", "lifecycle", "lightgbm", "link2GI", "lme4", "lpSolve", "lubridate", "lwgeom", "magic", "mapdata", "mapproj", "maps", "maptools", "markdown", "marmap", "matrixcalc", "MatrixModels", "mclust", "mgcv", "minqa", "mlpack", "mlr3", "mlr3learners", "mlr3misc", "mlr3tuning", "mlt", "modeldata", "mosaicCore", "mrds", "MuMIn", "nlme", "nnet", "oai", "openair", "openssl", "orthopolynom", "osmextract", "ows4R", "parsnip", "party", "pbapply", "PBSmapping", "pkgload", "plyr", "polyclip", "pracma", "PReMiuM", "processx", "progressr", "protolite", "ps", "purrr", "R.utils", "R2admb", "ragg", "ramps", "randtoolbox", "raster", "rbibutils", "Rborist", "RcppArmadillo", "RcppEigen", "RcppGSL", "RCurl", "RCzechia", "readr", "recipes", "reproj", "reticulate", "rgbif", "rgdal", "rgee", "RGF", "rgrass", "rgrass7", "rgugik", "rioja", "rje", "rlang", "rlas", "Rmalschains", "rmarkdown", "rngWELL", "roxygen2", "rpart", "RSQLite", "rstatix", "rstudioapi", "rversions", "RXshrink", "secr", "segmented", "sensitivity", "servr", "sf", "shapefiles", "shiny", "slider", "smerc", "sp", "spaMM", "sparr", "SpatialKDE", "spatialreg", "spatstat", "spatstat.data", "spatstat.geom", "spatstat.linnet", "spatstat.random", "spatstat.sparse", "spatstat.utils", "Spbsampling", "spData", "spdep", "sperrorest", "spmoran", "spsur", "spTimer", "styler", "surveillance", "synthACS", "sys", "testthat", "tfruns", "tgp", "tidycensus", "tidyr", "tidyselect", "timeDate", "tinytex", "topmodel", "torch", "traipse", "tram", "tseries", "tune", "tweenr", "urca", "V8", "vapour", "vcr", "vctrs", "vegan", "visNetwork", "vroom", "webshot", "whitebox", "wk", "wkutils", "workflows", "xfun", "XML", "xts", "yaml", "yardstick", "zip", "zoo"))
install.packages(c("abess", "ade4", "adehabitatHR", "adehabitatHS", "adehabitatLT", "adehabitatMA", "ads", "amap", "arules", "bartMachine", "bartMachineJARs", "bbotk", "BDgraph", "BiodiversityR", "bit", "bookdown", "Boruta", "brew", "Brobdingnag", "broom", "bslib", "C50", "callr", "car", "changepoint", "chron", "classInt", "cli", "cluster", "collapse", "commonmark", "CORElearn", "cpp11", "crayon", "crul", "ctv", "Cubist", "curl", "data.table", "date", "dbmss", "desc", "deSolve", "devtools", "dials", "digest", "dipm", "dismo", "Distance", "dotCall64", "dplyr", "e1071", "ecespa", "evaluate", "exactextractr", "fontawesome", "forecast", "fracdiff", "FRK", "fso", "future", "future.apply", "GA", "galah", "gam", "gamlss.dist", "gdalcubes", "gdistance", "gee", "geodist", "geojsonio", "geometa", "geos", "geosphere", "geouy", "gert", "gganimate", "ggcorrplot", "ggforce", "ggformula", "ggmap", "ggplot2", "ggpubr", "ggrepel", "ggridges", "ggsignif", "ggstance", "gh", "gitcreds", "gld", "globals", "gmp", "gstat", "gsw", "gtable", "h2o", "haven", "httpuv", "httr2", "ibdreg", "ICEbox", "igraph", "infer", "insight", "isoband", "jsonify", "jsonlite", "keyring", "kinship2", "knitr", "labelled", "landscapemetrics", "lava", "lgr", "libgeos", "lifecycle", "lightgbm", "link2GI", "lme4", "lpSolve", "lubridate", "lwgeom", "magic", "mapdata", "mapproj", "maps", "maptools", "markdown", "marmap", "matrixcalc", "MatrixModels", "mclust", "mgcv", "minqa", "mlpack", "mlr3", "mlr3learners", "mlr3misc", "mlr3tuning", "mlt", "modeldata", "mosaicCore", "mrds", "MuMIn", "nlme", "nnet", "oai", "openair", "openssl", "orthopolynom", "osmextract", "ows4R", "parsnip", "party", "pbapply", "PBSmapping", "pkgload", "plyr", "polyclip", "pracma", "PReMiuM", "processx", "progressr", "protolite", "ps", "purrr", "R.utils", "R2admb", "ragg", "ramps", "randtoolbox", "raster", "rbibutils", "Rborist", "RcppArmadillo", "RcppEigen", "RcppGSL", "RCurl", "RCzechia", "readr", "recipes", "reproj", "reticulate", "rgbif", "rgdal", "rgee", "RGF", "rgrass", "rgrass7", "rgugik", "rioja", "rje", "rlang", "rlas", "Rmalschains", "rmarkdown", "rngWELL", "roxygen2", "rpart", "RSQLite", "rstatix", "rstudioapi", "rversions", "RXshrink", "secr", "segmented", "sensitivity", "servr", "sf", "shapefiles", "shiny", "slider", "smerc", "sp", "spaMM", "sparr", "SpatialKDE", "spatialreg", "spatstat", "spatstat.data", "spatstat.geom", "spatstat.linnet", "spatstat.random", "spatstat.sparse", "spatstat.utils", "Spbsampling", "spData", "spdep", "sperrorest", "spmoran", "spsur", "spTimer", "styler", "surveillance", "synthACS", "sys", "testthat", "tfruns", "tgp", "tidycensus", "tidyr", "tidyselect", "timeDate", "tinytex", "topmodel", "torch", "traipse", "tram", "tseries", "tune", "tweenr", "urca", "V8", "vapour", "vcr", "vctrs", "vegan", "visNetwork", "vroom", "webshot", "whitebox", "wk", "wkutils", "workflows", "xfun", "XML", "xts", "yaml", "yardstick", "zip", "zoo"))
install.packages(c("abess", "ade4", "adehabitatHR", "adehabitatHS", "adehabitatLT", "adehabitatMA", "ads", "amap", "arules", "bartMachine", "bartMachineJARs", "bbotk", "BDgraph", "BiodiversityR", "bit", "bookdown", "Boruta", "brew", "Brobdingnag", "broom", "bslib", "C50", "callr", "car", "changepoint", "chron", "classInt", "cli", "cluster", "collapse", "commonmark", "CORElearn", "cpp11", "crayon", "crul", "ctv", "Cubist", "curl", "data.table", "date", "dbmss", "desc", "deSolve", "devtools", "dials", "digest", "dipm", "dismo", "Distance", "dotCall64", "dplyr", "e1071", "ecespa", "evaluate", "exactextractr", "fontawesome", "forecast", "fracdiff", "FRK", "fso", "future", "future.apply", "GA", "galah", "gam", "gamlss.dist", "gdalcubes", "gdistance", "gee", "geodist", "geojsonio", "geometa", "geos", "geosphere", "geouy", "gert", "gganimate", "ggcorrplot", "ggforce", "ggformula", "ggmap", "ggplot2", "ggpubr", "ggrepel", "ggridges", "ggsignif", "ggstance", "gh", "gitcreds", "gld", "globals", "gmp", "gstat", "gsw", "gtable", "h2o", "haven", "httpuv", "httr2", "ibdreg", "ICEbox", "igraph", "infer", "insight", "isoband", "jsonify", "jsonlite", "keyring", "kinship2", "knitr", "labelled", "landscapemetrics", "lava", "lgr", "libgeos", "lifecycle", "lightgbm", "link2GI", "lme4", "lpSolve", "lubridate", "lwgeom", "magic", "mapdata", "mapproj", "maps", "maptools", "markdown", "marmap", "matrixcalc", "MatrixModels", "mclust", "mgcv", "minqa", "mlpack", "mlr3", "mlr3learners", "mlr3misc", "mlr3tuning", "mlt", "modeldata", "mosaicCore", "mrds", "MuMIn", "nlme", "nnet", "oai", "openair", "openssl", "orthopolynom", "osmextract", "ows4R", "parsnip", "party", "pbapply", "PBSmapping", "pkgload", "plyr", "polyclip", "pracma", "PReMiuM", "processx", "progressr", "protolite", "ps", "purrr", "R.utils", "R2admb", "ragg", "ramps", "randtoolbox", "raster", "rbibutils", "Rborist", "RcppArmadillo", "RcppEigen", "RcppGSL", "RCurl", "RCzechia", "readr", "recipes", "reproj", "reticulate", "rgbif", "rgdal", "rgee", "RGF", "rgrass", "rgrass7", "rgugik", "rioja", "rje", "rlang", "rlas", "Rmalschains", "rmarkdown", "rngWELL", "roxygen2", "rpart", "RSQLite", "rstatix", "rstudioapi", "rversions", "RXshrink", "secr", "segmented", "sensitivity", "servr", "sf", "shapefiles", "shiny", "slider", "smerc", "sp", "spaMM", "sparr", "SpatialKDE", "spatialreg", "spatstat", "spatstat.data", "spatstat.geom", "spatstat.linnet", "spatstat.random", "spatstat.sparse", "spatstat.utils", "Spbsampling", "spData", "spdep", "sperrorest", "spmoran", "spsur", "spTimer", "styler", "surveillance", "synthACS", "sys", "testthat", "tfruns", "tgp", "tidycensus", "tidyr", "tidyselect", "timeDate", "tinytex", "topmodel", "torch", "traipse", "tram", "tseries", "tune", "tweenr", "urca", "V8", "vapour", "vcr", "vctrs", "vegan", "visNetwork", "vroom", "webshot", "whitebox", "wk", "wkutils", "workflows", "xfun", "XML", "xts", "yaml", "yardstick", "zip", "zoo"))
